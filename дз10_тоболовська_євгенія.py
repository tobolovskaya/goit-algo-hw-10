# -*- coding: utf-8 -*-
"""ДЗ10_Тоболовська Євгенія

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s8M6D8mq1C7cVSp102AJ51v5RuvvBQYN

Завдання 1
"""

from pulp import LpProblem, LpMaximize, LpVariable, lpSum, LpStatus, value

# Створення моделі задачі лінійного програмування
model = LpProblem("Оптимізація_виробництва_напоїв", LpMaximize)

# Визначення змінних рішення
лимонад = LpVariable("Лимонад", lowBound=0, cat='Integer')
фруктовий_сік = LpVariable("Фруктовий_сік", lowBound=0, cat='Integer')

# Функція цілі: максимізація загальної кількості вироблених напоїв
model += лимонад + фруктовий_сік

# Додавання обмежень за ресурсами
model += 2 * лимонад + фруктовий_сік <= 100, "Обмеження води"
model += лимонад <= 50, "Обмеження цукру"
model += лимонад <= 30, "Обмеження лимонного соку"
model += 2 * фруктовий_сік <= 40, "Обмеження фруктового пюре"

# Розв'язання моделі
model.solve()

# Виведення результатів
print("Статус:", LpStatus[model.status])
print("Оптимальна кількість Лимонаду:", лимонад.varValue)
print("Оптимальна кількість Фруктового соку:", фруктовий_сік.varValue)
print("Максимальна загальна кількість вироблених напоїв:", value(model.objective))

"""Завдання 2"""

import matplotlib.pyplot as plt
import numpy as np

# Визначення функції та межі інтегрування
def f(x):
    return x ** 2

a = 0  # Нижня межа
b = 2  # Верхня межа

# Створення діапазону значень для x
x = np.linspace(-0.5, 2.5, 400)
y = f(x)

# Створення графіка
fig, ax = plt.subplots()

# Малювання функції
ax.plot(x, y, 'r', linewidth=2)

# Заповнення області під кривою
ix = np.linspace(a, b)
iy = f(ix)
ax.fill_between(ix, iy, color='gray', alpha=0.3)

# Налаштування графіка
ax.set_xlim([x[0], x[-1]])
ax.set_ylim([0, max(y) + 0.1])
ax.set_xlabel('x')
ax.set_ylabel('f(x)')

# Додавання меж інтегрування та назви графіка
ax.axvline(x=a, color='gray', linestyle='--')
ax.axvline(x=b, color='gray', linestyle='--')
ax.set_title('Графік інтегрування f(x) = x^2 від ' + str(a) + ' до ' + str(b))
plt.grid()
plt.show()

# Обчислення значення інтеграла за допомогою методу Монте-Карло
N = 10000  # Кількість випадкових точок
x_rand = np.random.uniform(a, b, N)
y_rand = np.random.uniform(0, max(iy), N)

under_curve = y_rand < f(x_rand)
approx_area = np.sum(under_curve) / N * (b - a) * max(iy)

print(f"Значення інтеграла методом Монте-Карло: {approx_area}")

import scipy.integrate as spi

# Визначення функції, яку потрібно інтегрувати
def f(x):
    return x**2

# Визначення меж інтегрування
a = 0  # Нижня межа
b = 2  # Верхня межа

# Обчислення інтеграла
result, error = spi.quad(f, a, b)

print("Інтеграл (аналітичний розрахунок): ", result)
print("Абсолютна помилка: ", error)

# Порівняння з результатом, отриманим методом Монте-Карло
monte_carlo_result = 2.6264
print("Інтеграл (Монте-Карло): ", monte_carlo_result)

# Висновки
difference = abs(result - monte_carlo_result)
print("Різниця між аналітичним розрахунком та Монте-Карло: ", difference)